import { Keypair, Networks , contract} from "@stellar/stellar-sdk";

const API_KEY = 'your_openweathermap_api_key'; // Obtain free API key after signing up at https://home.openweathermap.org/users/sign_up 
const CITY = 'San Francisco';
const API_URL = `https://api.openweathermap.org/data/2.5/weather?q=${CITY}&appid=${API_KEY}&units=metric`;

const RPC_URL = "https://soroban-testnet.stellar.org";
const NETWORK = Networks.TESTNET;
const KEYPAIR = Keypair.fromSecret('your_testnet_stellar_secret_key'); // Secret key for testnet account generated by the CLI (do not use this for production with real account)
const CONTRACT_ID = "your_testnet_soroban_contract_id"; // Your Soroban smart contract ID deployed on testnet

declare const _STD_: any;

if (typeof _STD_ === "undefined") {
  // If _STD_ is not defined, we know it's not running in the Acurast Cloud.
  // Define _STD_ here for local testing.
  console.log("Running in local environment");
  (global as any)._STD_ = {
    app_info: { version: "local" },
    job: { getId: () => "local" },
    device: { getAddress: () => "local" },
  };
}

async function getCurrentWeather() {
  try {
    console.log("Calling weather API...");
    const response = await fetch(API_URL);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    const weatherInfo = {
      city: data.name,
      country: data.sys.country,
      temperature: Math.round(data.main.temp),
      feelsLike: Math.round(data.main.feels_like),
      humidity: data.main.humidity,
      description: data.weather[0].description,
      windSpeed: data.wind.speed,
      pressure: data.main.pressure
    };
    console.log('Current weather:');
    console.log(`Temperature: ${weatherInfo.temperature}°C (feels like ${weatherInfo.feelsLike}°C)`);
    console.log(`Conditions: ${weatherInfo.description}`);
    console.log(`Humidity: ${weatherInfo.humidity}%`);
    console.log(`Wind Speed: ${weatherInfo.windSpeed} m/s`);
    console.log(`Pressure: ${weatherInfo.pressure} hPa`);
    return weatherInfo;
  } catch (error) {
    console.error('Error fetching weather data:', error);
  }
}

async function callContract(temp: number, desc: string) {
  console.log("Temperature:", temp, " - ", typeof temp);
  console.log("Description:", desc, " - ", typeof desc);
  const { signTransaction } = contract.basicNodeSigner(KEYPAIR, NETWORK);
  const client : any = await contract.Client.from({
    contractId: CONTRACT_ID,
    networkPassphrase: NETWORK,
    rpcUrl: RPC_URL,
    publicKey: KEYPAIR.publicKey(),
    signTransaction,
  });
  console.log("Calling smart contract...");
  try {
    const transaction = await client.set_weather({
      temperature: temp,
      description: desc,
    });
    let { result: setWeatherResult } = await transaction.signAndSend();
    console.log('Contract response:');
    console.log(setWeatherResult);
  } catch (e) {
    console.log("Error calling contract:", e);
  }
}

async function compute() {
  try {
    const weatherResponse = await getCurrentWeather();
    console.log("Weather Finished");
    if (!weatherResponse) throw new Error("Weather response is undefined");
    const _ = await callContract(weatherResponse.temperature, weatherResponse.description);
    console.log("Contract Finished");
  } catch (error) {
    console.error("Error:", error);
  }
}

compute();